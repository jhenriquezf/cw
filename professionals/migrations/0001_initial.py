# Generated by Django 5.2.7 on 2025-10-25 14:40

import django.core.validators
import django.db.models.deletion
import professionals.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Professional',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(blank=True, help_text='Foto profesional (mínimo 800x800px)', null=True, upload_to=professionals.models.professional_photo_path, verbose_name='Foto de perfil')),
                ('bio', models.TextField(blank=True, help_text='Descripción breve (máximo 500 caracteres)', max_length=500, verbose_name='Biografía')),
                ('phone', models.CharField(help_text='Formato: +56912345678', max_length=20, verbose_name='Teléfono')),
                ('years_of_experience', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50)], verbose_name='Años de experiencia')),
                ('primary_specialty', models.CharField(choices=[('yoga', 'Yoga'), ('pilates', 'Pilates'), ('personal_training', 'Entrenamiento Personal'), ('functional', 'Entrenamiento Funcional'), ('hiit', 'HIIT'), ('trx', 'TRX'), ('animal_flow', 'Animal Flow'), ('calisthenics', 'Calistenia'), ('crossfit', 'CrossFit'), ('barre', 'Barre'), ('zumba', 'Zumba/Baile Fitness'), ('running', 'Running Coach'), ('cycling', 'Ciclismo'), ('other', 'Otro')], max_length=50, verbose_name='Especialidad principal')),
                ('comuna', models.CharField(choices=[('las_condes', 'Las Condes'), ('vitacura', 'Vitacura'), ('lo_barnechea', 'Lo Barnechea'), ('providencia', 'Providencia'), ('nunoa', 'Ñuñoa'), ('la_reina', 'La Reina'), ('penalolen', 'Peñalolén'), ('other', 'Otra')], max_length=50, verbose_name='Comuna base')),
                ('address', models.CharField(blank=True, help_text='Dirección del espacio de clases (opcional)', max_length=255, verbose_name='Dirección')),
                ('instagram_handle', models.CharField(blank=True, help_text='Sin el @, ejemplo: daniela.yoga', max_length=100, verbose_name='Instagram')),
                ('whatsapp_number', models.CharField(blank=True, help_text='Número de contacto WhatsApp', max_length=20, verbose_name='WhatsApp')),
                ('username_slug', models.SlugField(help_text='URL personalizada: conecta.cl/tu-username', max_length=100, unique=True, verbose_name='Username personalizado')),
                ('verification_status', models.CharField(choices=[('pending', 'Pendiente de verificación'), ('verified', 'Verificado'), ('rejected', 'Rechazado')], default='pending', max_length=20, verbose_name='Estado de verificación')),
                ('is_active', models.BooleanField(default=True, help_text='Perfil visible y puede recibir reservas', verbose_name='Activo')),
                ('total_bookings', models.PositiveIntegerField(default=0, verbose_name='Total de reservas')),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='Rating promedio')),
                ('total_reviews', models.PositiveIntegerField(default=0, verbose_name='Total de reseñas')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de registro')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última actualización')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='professional_profile', to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Profesional',
                'verbose_name_plural': 'Profesionales',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Certification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nombre de la certificación')),
                ('institution', models.CharField(max_length=200, verbose_name='Institución emisora')),
                ('year', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1950), django.core.validators.MaxValueValidator(2100)], verbose_name='Año de obtención')),
                ('document', models.FileField(help_text='PDF o imagen de la certificación', upload_to=professionals.models.certification_document_path, verbose_name='Documento')),
                ('verification_status', models.CharField(choices=[('pending_review', 'Pendiente de revisión'), ('verified', 'Verificada'), ('rejected', 'Rechazada')], default='pending_review', max_length=20, verbose_name='Estado de verificación')),
                ('verification_notes', models.TextField(blank=True, help_text='Razón de rechazo o comentarios', verbose_name='Notas de verificación')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de verificación')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de subida')),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_certifications', to=settings.AUTH_USER_MODEL, verbose_name='Verificado por')),
                ('professional', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certifications', to='professionals.professional', verbose_name='Profesional')),
            ],
            options={
                'verbose_name': 'Certificación',
                'verbose_name_plural': 'Certificaciones',
                'ordering': ['-year', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BlockedDate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Fecha bloqueada')),
                ('all_day', models.BooleanField(default=True, verbose_name='Todo el día')),
                ('start_time', models.TimeField(blank=True, null=True, verbose_name='Hora de inicio (si no es todo el día)')),
                ('end_time', models.TimeField(blank=True, null=True, verbose_name='Hora de fin (si no es todo el día)')),
                ('reason', models.CharField(blank=True, help_text='Vacaciones, feriado, día personal, etc.', max_length=200, verbose_name='Motivo')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('professional', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocked_dates', to='professionals.professional', verbose_name='Profesional')),
            ],
            options={
                'verbose_name': 'Fecha bloqueada',
                'verbose_name_plural': 'Fechas bloqueadas',
                'ordering': ['date'],
            },
        ),
        migrations.CreateModel(
            name='AvailabilityBlock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.IntegerField(choices=[(0, 'Lunes'), (1, 'Martes'), (2, 'Miércoles'), (3, 'Jueves'), (4, 'Viernes'), (5, 'Sábado'), (6, 'Domingo')], verbose_name='Día de la semana')),
                ('start_time', models.TimeField(verbose_name='Hora de inicio')),
                ('end_time', models.TimeField(verbose_name='Hora de fin')),
                ('is_active', models.BooleanField(default=True, verbose_name='Activo')),
                ('professional', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability_blocks', to='professionals.professional', verbose_name='Profesional')),
            ],
            options={
                'verbose_name': 'Bloque de disponibilidad',
                'verbose_name_plural': 'Bloques de disponibilidad',
                'ordering': ['day_of_week', 'start_time'],
            },
        ),
        migrations.AddIndex(
            model_name='professional',
            index=models.Index(fields=['username_slug'], name='professiona_usernam_ae8565_idx'),
        ),
        migrations.AddIndex(
            model_name='professional',
            index=models.Index(fields=['primary_specialty', 'comuna'], name='professiona_primary_df0b30_idx'),
        ),
        migrations.AddIndex(
            model_name='professional',
            index=models.Index(fields=['verification_status', 'is_active'], name='professiona_verific_9612ae_idx'),
        ),
        migrations.AddIndex(
            model_name='certification',
            index=models.Index(fields=['professional', 'verification_status'], name='professiona_profess_590562_idx'),
        ),
        migrations.AddIndex(
            model_name='blockeddate',
            index=models.Index(fields=['professional', 'date'], name='professiona_profess_3a6368_idx'),
        ),
        migrations.AddIndex(
            model_name='availabilityblock',
            index=models.Index(fields=['professional', 'day_of_week', 'is_active'], name='professiona_profess_66e0f2_idx'),
        ),
    ]
