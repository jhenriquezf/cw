# Generated by Django 5.2.7 on 2025-10-25 14:40

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('professionals', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ServiceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Nombre')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True, max_length=500, verbose_name='Descripción')),
                ('icon', models.CharField(blank=True, help_text='Nombre del ícono (ej: lucide-icon-name)', max_length=50, verbose_name='Ícono')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Orden')),
                ('is_active', models.BooleanField(default=True, verbose_name='Activa')),
            ],
            options={
                'verbose_name': 'Categoría de servicio',
                'verbose_name_plural': 'Categorías de servicio',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Ej: Clase de Vinyasa Yoga', max_length=200, verbose_name='Nombre del servicio')),
                ('description', models.TextField(blank=True, help_text='Descripción detallada del servicio', max_length=1000, verbose_name='Descripción')),
                ('service_type', models.CharField(choices=[('individual', 'Individual (1 persona)'), ('duo', 'Dúo (2 personas)'), ('small_group', 'Grupo pequeño (3-6 personas)'), ('large_group', 'Grupo grande (7+ personas)')], default='individual', max_length=20, verbose_name='Tipo de sesión')),
                ('max_participants', models.PositiveIntegerField(default=1, help_text='Solo para sesiones grupales', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)], verbose_name='Máximo de participantes')),
                ('modality', models.CharField(choices=[('presencial', 'Presencial'), ('online', 'Online'), ('a_domicilio', 'A domicilio'), ('hibrido', 'Híbrido (Presencial y Online)')], max_length=20, verbose_name='Modalidad')),
                ('duration_minutes', models.PositiveIntegerField(choices=[(30, '30 minutos'), (45, '45 minutos'), (60, '60 minutos'), (90, '90 minutos'), (120, '120 minutos')], default=60, verbose_name='Duración (minutos)')),
                ('level', models.CharField(choices=[('todos', 'Todos los niveles'), ('principiante', 'Principiante'), ('intermedio', 'Intermedio'), ('avanzado', 'Avanzado')], default='todos', max_length=20, verbose_name='Nivel')),
                ('price', models.DecimalField(decimal_places=2, help_text='Precio en pesos chilenos (CLP)', max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Precio')),
                ('what_to_bring', models.TextField(blank=True, help_text='Ej: Mat de yoga, toalla, botella de agua', max_length=500, verbose_name='Qué traer')),
                ('what_includes', models.TextField(blank=True, help_text='Ej: Mat proporcionado, espacio climatizado', max_length=500, verbose_name='Qué incluye')),
                ('location_details', models.TextField(blank=True, help_text='Información adicional sobre dónde es la clase', max_length=500, verbose_name='Detalles de ubicación')),
                ('is_active', models.BooleanField(default=True, help_text='Visible y disponible para reservas', verbose_name='Activo')),
                ('total_bookings', models.PositiveIntegerField(default=0, verbose_name='Total de reservas')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última actualización')),
                ('professional', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to='professionals.professional', verbose_name='Profesional')),
            ],
            options={
                'verbose_name': 'Servicio',
                'verbose_name_plural': 'Servicios',
                'ordering': ['professional', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ServiceTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Nombre')),
                ('slug', models.SlugField(unique=True, verbose_name='Slug')),
                ('services', models.ManyToManyField(blank=True, related_name='tags', to='services.service', verbose_name='Servicios')),
            ],
            options={
                'verbose_name': 'Etiqueta',
                'verbose_name_plural': 'Etiquetas',
                'ordering': ['name'],
            },
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['professional', 'is_active'], name='services_se_profess_45f9cd_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['service_type', 'modality'], name='services_se_service_4b0016_idx'),
        ),
    ]
